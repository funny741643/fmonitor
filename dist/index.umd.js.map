{"version":3,"file":"index.umd.js","sources":["../src/utils/index.ts","../src/performance/index.ts","../src/index.ts"],"sourcesContent":["export function isSupportPerformanceObserver(): boolean {\r\n    return !!window.PerformanceObserver\r\n}\r\n\r\nexport function getPageURL(): string {\r\n    return window.location.href\r\n}\r\n","import { getPageURL, isSupportPerformanceObserver } from '../utils'\r\n\r\nexport type IEntryHandler = (list: PerformanceObserverEntryList) => void\r\n\r\nexport default class Performance {\r\n    private paintObserver!: PerformanceObserver\r\n\r\n    private lcpObserver!: PerformanceObserver\r\n\r\n    constructor() {\r\n        this.observe()\r\n    }\r\n\r\n    getObserver(type: string, entryHandler: IEntryHandler): PerformanceObserver | null {\r\n        if (!isSupportPerformanceObserver()) return null\r\n        const observer = new PerformanceObserver(entryHandler)\r\n        observer.observe({\r\n            type,\r\n            buffered: true,\r\n        })\r\n        return observer\r\n    }\r\n\r\n    paintEntryHandler: IEntryHandler = list => {\r\n        for (const entry of list.getEntries()) {\r\n            const json = entry.toJSON()\r\n            delete json.duration\r\n            \r\n            const reportData = {\r\n                ...json,\r\n                subType: entry.name,\r\n                type: 'performance',\r\n                pageURL: getPageURL(),\r\n            }\r\n\r\n            console.log(reportData)\r\n        }\r\n    }\r\n\r\n    LCPEntryHandler: IEntryHandler = list => {\r\n        for (const entry of list.getEntries()) {\r\n            const json = entry.toJSON()\r\n            console.log(json)\r\n        }\r\n    }\r\n\r\n    observe() {\r\n        this.paintObserver = this.getObserver('paint', this.paintEntryHandler)!\r\n        this.lcpObserver = this.getObserver('largest-contentful-paint', this.LCPEntryHandler)!\r\n    }\r\n}\r\n","import { IConfig } from './config'\r\nimport PerformanceObserver from './performance/index'\r\n\r\nexport default class Fmonitor {\r\n    private options!: IConfig\r\n\r\n    constructor() {\r\n        this.init()\r\n    }\r\n\r\n    // eslint-disable-next-line class-methods-use-this\r\n    init() {\r\n        new PerformanceObserver()\r\n    }\r\n}\r\n\r\nconst fmonitor = new Fmonitor()\r\nconsole.log(fmonitor)\r\n"],"names":["PerformanceObserver"],"mappings":";;;aAAgB,4BAA4B,GAAA;IACxC,IAAA,OAAO,CAAC,CAAC,MAAM,CAAC,mBAAmB,CAAA;IACvC,CAAC;aAEe,UAAU,GAAA;IACtB,IAAA,OAAO,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAA;IAC/B;;ICFc,MAAO,WAAW,CAAA;IAK5B,IAAA,WAAA,GAAA;YAcA,IAAiB,CAAA,iBAAA,GAAkB,IAAI,IAAG;IACtC,YAAA,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;IACnC,gBAAA,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,EAAE,CAAA;oBAC3B,OAAO,IAAI,CAAC,QAAQ,CAAA;IAEpB,gBAAA,MAAM,UAAU,GACT,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,IAAI,KACP,OAAO,EAAE,KAAK,CAAC,IAAI,EACnB,IAAI,EAAE,aAAa,EACnB,OAAO,EAAE,UAAU,EAAE,GACxB,CAAA;IAED,gBAAA,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAA;IAC1B,aAAA;IACL,SAAC,CAAA;YAED,IAAe,CAAA,eAAA,GAAkB,IAAI,IAAG;IACpC,YAAA,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,UAAU,EAAE,EAAE;IACnC,gBAAA,MAAM,IAAI,GAAG,KAAK,CAAC,MAAM,EAAE,CAAA;IAC3B,gBAAA,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IACpB,aAAA;IACL,SAAC,CAAA;YAlCG,IAAI,CAAC,OAAO,EAAE,CAAA;SACjB;QAED,WAAW,CAAC,IAAY,EAAE,YAA2B,EAAA;YACjD,IAAI,CAAC,4BAA4B,EAAE;IAAE,YAAA,OAAO,IAAI,CAAA;IAChD,QAAA,MAAM,QAAQ,GAAG,IAAI,mBAAmB,CAAC,YAAY,CAAC,CAAA;YACtD,QAAQ,CAAC,OAAO,CAAC;gBACb,IAAI;IACJ,YAAA,QAAQ,EAAE,IAAI;IACjB,SAAA,CAAC,CAAA;IACF,QAAA,OAAO,QAAQ,CAAA;SAClB;QAyBD,OAAO,GAAA;IACH,QAAA,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAE,CAAA;IACvE,QAAA,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,0BAA0B,EAAE,IAAI,CAAC,eAAe,CAAE,CAAA;SACzF;IACJ;;IC/Ca,MAAO,QAAQ,CAAA;IAGzB,IAAA,WAAA,GAAA;YACI,IAAI,CAAC,IAAI,EAAE,CAAA;SACd;;QAGD,IAAI,GAAA;YACA,IAAIA,WAAmB,EAAE,CAAA;SAC5B;IACJ,CAAA;IAED,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAA;IAC/B,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;;;;;;;;"}